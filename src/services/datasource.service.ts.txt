import {BindingScope, injectable} from '@loopback/core';
import {juggler} from '@loopback/repository';
import {DataSourceConfiguration, TenantDatasource} from '../types';

@injectable({scope: BindingScope.TRANSIENT})
export class DatasourceService {
  constructor(

  ) { }


  async connect(config: DataSourceConfiguration): Promise<TenantDatasource> {
    return new Promise((resolve, reject) => {
      console.log("DS CONFIG")
      console.log(config)
      const ds = new juggler.DataSource(config);
      ds.once('connected', async () => {
        console.log("DS CONNECTED")
        try {
          // Check if the connection is valid
          await ds.ping();
          // resolve(ds); // Resolve the promise when the connection is established
        } catch (error) {
          reject(error); // Reject if there's an error during ping
        }
      });
      ds.once('error', (err) => {
        reject(err); // Reject the promise if there's an error
      });
      ds.connect(); // Start the connection
    });
  }

}
